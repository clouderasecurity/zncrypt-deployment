#!/bin/bash

# Author:: Ross McDonald (<ross.mcdonald@gazzang.com>)
# Copyright 2013, Gazzang, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#################################################
# GLOBAL VARIABLES
#################################################

ROOT_UID=0

# zTrustee registration/activation email
KEYSERVER=
ACTIVATION_EMAIL=

# Password location (if using autogenerated passwords)
PASSWORD_DIR=/dev/shm/zncrypt-install
PASSWORD_FILE=$PASSWORD_DIR/password

# Category to encrypt data.
# Current script functionality only supports one category
CATEGORY=

# ACL rules to add to encrypted data
ACL_RULES=( )

# Mount directories to store encrypted data (mount dir and 
# storage dir will be the same)
STORAGE_DIRS=( /encrypted )

# Directories/files that we want to encrypt
DIRS_TO_ENCRYPT=( )

INSTALL_LOG=install.log

#################################################
# FUNCTIONS
#################################################

# func exception
# Outputs a simple error message then exits with return code of 1
function exception {
    cat install.log
    echo ""
    echo "!! EXCEPTION - $*"
    echo "!! Please check $INSTALL_LOG (output above) for more details."
    echo ""
    exit 1
}

# func notice
# Outputs a notice status to stdout
function notice {
    echo "NOTICE - $*"
}

# func check_sys_compatibilty
# Checks to make sure system is compatible based on a few outstanding issues with distros, VM's, etc.
function check_sys_compatibilty {
    notice "Checking system compatibility..."
    # Check for linux
    if [ "$OSTYPE" != "linux-gnu" ]; then 
        exception "Sorry, zNcrypt is only compatible with Linux-based operating systems."
    fi

    # Check for OpenVZ, which is not currently supported by zNcrypt
    if [ -f /proc/user_beancounters ]; then
        exception "Sorry, you are using an incompatible virtualization software. Please contact support@gazzang.com for a list of supported platforms."
    fi
    
    return 0
}

# func get_sys_information
# Collects system information required for system information
function get_sys_information {
    notice "Collecting system information..."
    # Determine distribution and version
    if [ -f /etc/redhat-release ]; then # RedHat/CentOS/Oracle
        OS="RedHat"
        cat /etc/issue | grep 5\.. &>$INSTALL_LOG
        if [ $? -eq 0 ]; then 
            notice "Red Hat 5 variant detected..."
            VER=5
        fi
        cat /etc/issue | grep 6\.. &>$INSTALL_LOG
        if [ $? -eq 0 ]; then
            notice "Red Hat 6 variant detected..."
            VER=6
        fi
    elif [ -f /etc/lsb-release ]; then # Ubuntu and Debian
        . /etc/lsb-release
        OS=$DISTRIB_ID
        VER=$DISTRIB_RELEASE
        CODENAME=$DISTRIB_CODENAME
    elif [ -f /etc/system-release ]; then
        exception "Sorry, Amazon Linux is not supported."
    else
        OS=$(uname -s)
        VER=$(uname -r)
        exception "Sorry, this version of Linux is not yet supported."
    fi
    
    return 0
}

# func create_password
# Creates a randomized password used for zNcrypt registration
function create_password {
    notice "Generating master password at $PASSWORD_FILE..."
    
    if [ ! -d $PASSWORD_DIR ]; then
        mkdir -p $PASSWORD_DIR
    fi
    
    if [ ! -f $PASSWORD_FILE ]; then
        tr -dc A-Za-z0-9_ < /dev/random | head -c 30 | xargs > $PASSWORD_FILE
        chown root:root $PASSWORD_FILE
        chmod 400 $PASSWORD_FILE
    fi
}

# func ubuntu_setup
# Configures repositories and installs zNcrypt dependencies on Ubuntu
function ubuntu_setup {
    notice "Switching to Ubuntu configuration..."
    
    # configure repository
    cat /etc/apt/sources.list | grep http://archive.gazzang.com &>$INSTALL_LOG
    if [ $? -ne 0 ]; then
        notice "Adding Gazzang repository..."
        echo "deb http://archive.gazzang.com/$(echo $OS | tr '[A-Z]' '[a-z]')/stable $CODENAME main" >> /etc/apt/sources.list
        wget http://archive.gazzang.com/gpg_gazzang.asc &>$INSTALL_LOG
        sudo apt-key add gpg_gazzang.asc &>$INSTALL_LOG
        rm -f gpg_gazzang.asc &>$INSTALL_LOG
    fi
    
    if [ ! -x /usr/sbin/zncrypt ]; then
        notice "Updating package lists..."
        apt-get update &>$INSTALL_LOG
        
        notice "Installing kernel headers..."
        apt-get install linux-headers-$(uname -r) -y &>$INSTALL_LOG
        
        notice "Installing zNcrypt..."
        apt-get install zncrypt -y &>$INSTALL_LOG
        if [ $? -ne 0 ]; then
            exception "Installation of zNcrypt failed. Exiting."
        fi
        
        notice "Starting haveged service (for secure entropy generation)..."
        service haveged start
    else
        notice "zNcrypt already installed. Skipping installation..."
    fi
    
    return 0
}

# func rhel_setup
# Configures repositories and installs zNcrypt dependencies on RHEL 
function rhel_setup {
    notice "Switching to RHEL/CentOS configuration..."
    
    which make &>/dev/null
    if [ $? -ne 0 ]; then
        yum install make -y &>$INSTALL_LOG
    fi
    
    which perl &>/dev/null
    if [ $? -ne 0 ]; then
        yum install perl -y &>$INSTALL_LOG
    fi
        
    # Check for/install epel repositories
    ls -la /etc/yum.repos.d/*epel* &>$INSTALL_LOG
    if [ $? -ne 0 ]; then
        notice "Adding EPEL repository..."
        if [ $VER -eq 5 ]; then
            curl -o epel.rpm -L http://download.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm &>$INSTALL_LOG
            rpm -i epel.rpm &>$INSTALL_LOG
            rm -f epel.rpm &>$INSTALL_LOG
        elif [ $VER -eq 6 ]; then
            curl -o epel.rpm -L http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm &>$INSTALL_LOG
            rpm -i epel.rpm &>$INSTALL_LOG
            rm -f epel.rpm &>$INSTALL_LOG
        fi
    fi
    
    # Check for Azure version of OpenLogic CentOS 6.3 (which disables kernel updates by default)
    cat /etc/yum.conf -n | grep exclude=kernel &>$INSTALL_LOG
    if [ $? -eq 0 ]; then
        notice "Kernel updates are disabled. Enabling..."
        # Remove line disabling kernel updates
        sed -i".old" '/exclude=kernel*/d' /etc/yum.conf
    fi
    
    if [ -f /etc/oracle-release ]; then
        ls /etc/yum.repos.d/public-yum* &>$INSTALL_LOG
        if [ $? -ne 0 ]; then
            notice "No public repos for Oracle Linux detected. Adding..."
            if [ $VER -eq 5 ]; then
                curl -o /etc/yum.repos.d/public-yum-el5.repo http://public-yum.oracle.com/public-yum-el5.repo &>$INSTALL_LOG
            elif [ $VER -eq 6 ]; then
                curl -o /etc/yum.repos.d/public-yum-ol6.repo http://public-yum.oracle.com/public-yum-ol6.repo &>$INSTALL_LOG
            fi
        fi
    fi

    # configure repository
    if [ ! -f /etc/yum.repos.d/gazzang.repo ]; then 
        echo "[gazzang]" >> /etc/yum.repos.d/gazzang.repo
        echo "name=RHEL $VER - gazzang.com - base" >> /etc/yum.repos.d/gazzang.repo
        echo "baseurl=http://archive.gazzang.com/redhat/stable/$VER" >> /etc/yum.repos.d/gazzang.repo
        echo "enabled=1" >> /etc/yum.repos.d/gazzang.repo
        echo "gpgcheck=1" >> /etc/yum.repos.d/gazzang.repo
        echo "gpgkey=http://archive.gazzang.com/gpg_gazzang.asc" >> /etc/yum.repos.d/gazzang.repo
        
        # retrieve and add Gazzang gpg key
        notice "Adding Gazzang public key..."
        curl -o gpg_gazzang.asc http://archive.gazzang.com/gpg_gazzang.asc &>$INSTALL_LOG
        rpm --import gpg_gazzang.asc &>$INSTALL_LOG
        if [ $? -ne 0 ]; then
            exception "Could not import Gazzang Repository public key. Exiting."
        fi
        rm gpg_gazzang.asc

        # install kernel headers and devel
        notice "Installing kernel-devel..."
        yum install kernel-devel-$(uname -r) -y &>$INSTALL_LOG
        if [ $? -ne 0 ]; then
            notice "WARNING! Could not install kernel-devel. zNcrypt might not build correctly later."
        fi
        notice "Installing kernel headers..."
        yum install kernel-headers-$(uname -r) -y &>$INSTALL_LOG
        if [ $? -ne 0 ]; then
            notice "WARNING! Could not install kernel-headers. zNcrypt might not build correctly later."
        fi
        
        if [ -f /etc/oracle-release ]; then
            notice "Attempting to install kernel-uek-devel..."
            yum -y install kernel-uek-devel-$(uname -r) &>$INSTALL_LOG
            if [ $? -ne 0 ]; then
                notice "WARNING! Could not install uek-kernel-devel. zNcrypt might not build correctly later."
            fi
        fi

        notice "Installing haveged (for secure entropy generation)..."
        yum install haveged -y &>$INSTALL_LOG
        service haveged start &>$INSTALL_LOG
        if [ $? -ne 0 ]; then
            notice "WARNING! Haveged could not be started. Key generation might take a while..."
        fi

        notice "Disabling selinux..."
        setenforce 0 &>$INSTALL_LOG
    fi
    
    if [ ! -x /usr/sbin/zncrypt ]; then
        notice "Installing zNcrypt..."
        yum install zncrypt -y &>$INSTALL_LOG
        if [ $? -ne 0 ]; then
            exception "Installation of zNcrypt failed. Exiting."
        fi
        notice "Adding zncrypt-mount to start order..."
        chkconfig --level 235 zncrypt-mount on &>$INSTALL_LOG
    fi
    
    return 0
}

# func register_zncrypt
# Registers the zNcrypt client with the zTrustee server. Retries if it fails. 
function register_zncrypt {
    notice "Registering zNcrypt with $KEYSERVER..."
    
    if [ -f /etc/zncrypt/ztrustee/clientname ]; then
        notice "zNcrypt is already registered."
        return 0
    fi
    
    if [ -f /etc/oracle-release ]; then
        notice "Modifying zNcrypt configuration for Oracle Linux..."
        # Need to remove the redhat 5 flags, cause compilation failure
        sed -i".old" '/EXTRA_CFLAGS += -DREDHAT5/d' /usr/src/zncryptfs-3.2.3/Makefile
    fi
    
    notice "Building zNcrypt kernel module..."
    zncrypt-module-setup &>$INSTALL_LOG
    if [ $? -ne 0 ]; then
        exception "Could not compile zncrypt kernel module. Please check kernel headers and devel."
    fi
    
    if [ -f /etc/cron.hourly/zncrypt-ping ]; then
        notice "Removing zncrypt-ping cron job..."
        rm -f /etc/cron.hourly/zncrypt-ping
    fi
    
    create_password
    
    # set flag for exiting
    local RETVAL=1
    # set a counter to make sure we don't continue registering forever
    local COUNT=0
    notice "Performing registration handshake with keyserver..."
    while [ $RETVAL -ne 0 ]; do
        # register zNcrypt client and collect return code
        printf "%s\n%s" $(cat $PASSWORD_FILE) $(cat $PASSWORD_FILE) | zncrypt register --key-type=single-passphrase --server=$KEYSERVER &>$INSTALL_LOG
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
            # stop the 'already registered' feedback loop, WARNING: this will erase the configuration
            notice "Could not complete handshake. Retrying..."
            rm -rf /etc/zncrypt/ztrustee
        fi
        
        if [ $COUNT -gt 4 ]; then
            exception "Could not register zNcrypt client. Exiting."
        fi
        let COUNT=COUNT+1
    done
    
    return 0
}

# func activate_zncrypt
# Sends an activation request for the zNcrypt client
function activate_zncrypt {
    notice "Activating zNcrypt client with contact $ACTIVATION_EMAIL..."
    zncrypt request-activation -c $ACTIVATION_EMAIL &>$INSTALL_LOG
    
    # Wait for activation to be accepted (required in some situations)
    #echo "[ PRESS ENTER ONCE ACTIVATED ]"
    #read
    
    return 0
}

# func prepare_zncrypt
# Prepares the system for encryption by executing zncrypt-prepare.
function prepare_zncrypt {
    notice "Preparing file system for encryption..."

    for DIR in ${STORAGE_DIRS[@]} ; do
        cat /etc/zncrypt/ztab | grep $DIR &>$INSTALL_LOG
        if [ $? -ne 0 ]; then
            notice "Mounting encrypted directory $DIR ..."
            if [ ! -d $DIR ]; then
                mkdir -p $DIR
            fi
            cat $PASSWORD_FILE | zncrypt-prepare $DIR $DIR &>$INSTALL_LOG
            if [ $? -ne 0 ]; then
                exception "zNcrypt prepare failed. Exiting."
            fi
        fi
    done
    
    return 0
}

# func encrypt_directories
# Encrypts target directories one at a time.
function encrypt_directories {
    notice "Encrypting target directories..."

    local COUNT=0
    while [ $COUNT -lt ${#DIRS_TO_ENCRYPT[@]} ]; do
        test -h $DIR
        if [ $? -ne 0 ]; then
            notice "Encrypting directory ${DIRS_TO_ENCRYPT[$COUNT]}..."
            cat $PASSWORD_FILE | zncrypt-move encrypt @$CATEGORY ${DIRS_TO_ENCRYPT[$COUNT]} ${STORAGE_DIRS[$COUNT]}
            if [ $? -ne 0 ]; then
                exception "zncrypt-move failed. Exiting."
            fi
        fi
        let COUNT=COUNT+1
    done
    
    return 0
}

# func add
# Add appropriate ACL rules.
function add_acls {
    notice "Adding ACL rules..."

    for RULE in ${ACL_RULES[@]} ; do
        notice "Adding ACL rule:\"ALLOW @$CATEGORY * $RULE\""
        cat $PASSWORD_FILE | zncrypt acl --add --rule="ALLOW @$CATEGORY * $RULE" &>$INSTALL_LOG
        if [ $? -ne 0 ]; then
            exception "Adding of ACL rule failed. Exiting."
        fi
    done
    
    return 0
}

#################################################
# START OF SCRIPT
#################################################

echo "     ____"                                
echo "    / ___| __ _ __________ _ _ __   __ _ "
echo "   | |  _ / _\` |_  /_  / _\` | \'_ \/ _\` | "
echo "   | |_| | (_| |/ / / / (_| | | | | (_| |    "
echo "    \____|\__,_/___/___\__,_|_| |_|\__, |    "
echo "                     Gazzang, Inc. |___/  " 
echo ""

# Check for root user
if [ "$UID" -ne "$ROOT_UID" ]; then
    exception "Please run as root."
fi

check_sys_compatibilty
get_sys_information

case "$OS" in
    "Ubuntu") 
    ubuntu_setup
    ;;
    "RedHat")
    rhel_setup
    ;;
    *)
    exception "Invalid operating system. Exiting."
    ;;
esac

register_zncrypt
activate_zncrypt
prepare_zncrypt
#encrypt_directories
#add_acls

notice "Successfully completed installation."
notice "-----> Master password for $(hostname) = $(cat $PASSWORD_FILE)"

#notice "Removing password file..."
#rm -f $PASSWORD_FILE

notice "Done."

exit 0
